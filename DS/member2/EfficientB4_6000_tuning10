{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"0403377f","executionInfo":{"status":"ok","timestamp":1674473015050,"user_tz":-540,"elapsed":5810,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["import os\n","import io\n","from zipfile import ZipFile\n","import pandas as pd\n","import tensorflow as tf\n","from PIL import Image\n","import numpy as np\n","import random\n","import matplotlib.image as mpimg\n","import matplotlib.pyplot as plt\n","import cv2\n","from sklearn.metrics import *\n","import os\n","import zipfile\n","from google.colab import drive\n","from keras.utils import np_utils\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator"],"id":"0403377f"},{"cell_type":"code","source":["import h5py\n","print(h5py.__version__)\n"],"metadata":{"id":"UkThKxAh0T0o","executionInfo":{"status":"ok","timestamp":1674187691500,"user_tz":-540,"elapsed":3,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"outputId":"fd64f34b-f023-49f1-95fa-f32a35510408","colab":{"base_uri":"https://localhost:8080/"}},"id":"UkThKxAh0T0o","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.1.0\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1163,"status":"ok","timestamp":1674044027100,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"dVvuehOFZbVr","outputId":"46ad1411-e408-49d4-f3f7-68d74f5acc31"},"outputs":[{"name":"stdout","output_type":"stream","text":["Wed Jan 18 12:13:46 2023       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   51C    P0    27W /  70W |      0MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi"],"id":"dVvuehOFZbVr"},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MKd4bLhMY9Kb","executionInfo":{"status":"ok","timestamp":1674473029675,"user_tz":-540,"elapsed":14632,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"outputId":"9dcb214d-75a0-45b3-fe52-5be54db99b33"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["drive.mount('/content/drive')"],"id":"MKd4bLhMY9Kb"},{"cell_type":"code","execution_count":3,"metadata":{"id":"Vr5XgKxgZUJF","executionInfo":{"status":"ok","timestamp":1674473046438,"user_tz":-540,"elapsed":16765,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["local_zip = '/content/drive/MyDrive/eyes_train.zip'\n","zip_ref = zipfile.ZipFile(local_zip, 'r')\n","zip_ref.extractall('/content')\n","zip_ref.close()"],"id":"Vr5XgKxgZUJF"},{"cell_type":"code","execution_count":4,"metadata":{"id":"D_pWqLysByXk","executionInfo":{"status":"ok","timestamp":1674473074353,"user_tz":-540,"elapsed":27932,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#백내장 무 폴더 정리\n","img_dir0 = '/content/eyes_train/eye_train/0'\n","img0 = os.listdir(img_dir0)\n","image0 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img0))\n","label0 = list(filter(lambda x : x.find('.json')!=-1,img0))\n","image_0 = []\n","image_label0 = []\n","for i in image0:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/0/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im0 = cv2.resize(im,(224,224))\n","    image_0.append(im0)\n","    image_label0.append(0)"],"id":"D_pWqLysByXk"},{"cell_type":"code","execution_count":5,"metadata":{"id":"kJ5HCPjhGPVH","executionInfo":{"status":"ok","timestamp":1674473090514,"user_tz":-540,"elapsed":16165,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#백내장 초기 폴더 정리\n","img_dir1 = '/content/eyes_train/eye_train/1'\n","img1 = os.listdir(img_dir1)\n","image1 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img1))\n","label1 = list(filter(lambda x : x.find('.json')!=-1,img1))\n","for i in image1:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/1/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im1 = cv2.resize(im,(224,224))\n","    image_0.append(im1)\n","    image_label0.append(1)"],"id":"kJ5HCPjhGPVH"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1673748833794,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"7GQHgBu9JD8A","outputId":"2ff669fd-ef4e-4b76-b109-f5ddb0d8f092"},"outputs":[{"data":{"text/plain":["13756"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["len(image_0)"],"id":"7GQHgBu9JD8A"},{"cell_type":"code","execution_count":6,"metadata":{"id":"iNrcYry6GuX0","executionInfo":{"status":"ok","timestamp":1674473106965,"user_tz":-540,"elapsed":16464,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#백내장 비성숙 폴더 정리\n","img_dir2 = '/content/eyes_train/eye_train/2'\n","img2 = os.listdir(img_dir2)\n","image2 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img2))\n","label2 = list(filter(lambda x : x.find('.json')!=-1,img2))\n","for i in image2:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/2/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im2 = cv2.resize(im,(224,224))\n","    image_0.append(im2)\n","    image_label0.append(2)"],"id":"iNrcYry6GuX0"},{"cell_type":"code","execution_count":7,"metadata":{"id":"h76Hzvl8HRqK","executionInfo":{"status":"ok","timestamp":1674473122959,"user_tz":-540,"elapsed":15999,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#백내장 성숙 폴더 정리\n","img_dir3 = '/content/eyes_train/eye_train/3'\n","img3 = os.listdir(img_dir3)\n","image3 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img3))\n","label3 = list(filter(lambda x : x.find('.json')!=-1,img3))\n","for i in image3:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/3/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im3 = cv2.resize(im,(224,224))\n","    image_0.append(im3)\n","    image_label0.append(3)"],"id":"h76Hzvl8HRqK"},{"cell_type":"code","execution_count":8,"metadata":{"id":"9ff23a93","executionInfo":{"status":"ok","timestamp":1674473123995,"user_tz":-540,"elapsed":1040,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["x = np.array(image_0)\n","y = np.array(image_label0)"],"id":"9ff23a93"},{"cell_type":"code","execution_count":9,"metadata":{"id":"ULV80pESE8iq","executionInfo":{"status":"ok","timestamp":1674473123996,"user_tz":-540,"elapsed":4,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#원핫 인코딩\n","y = np_utils.to_categorical(y)"],"id":"ULV80pESE8iq"},{"cell_type":"code","execution_count":10,"metadata":{"id":"d7912f59","executionInfo":{"status":"ok","timestamp":1674473125296,"user_tz":-540,"elapsed":1303,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#데이터 분할\n","x_train, x_val, y_train, y_val = train_test_split(x, y, shuffle =True, test_size = 0.2, random_state = 123)"],"id":"d7912f59"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10021,"status":"ok","timestamp":1673748878537,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"91d5d927","outputId":"d6004793-8806-40b2-83dc-5db335c6abd0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/keras-applications/efficientnetb4_notop.h5\n","71686520/71686520 [==============================] - 4s 0us/step\n"]}],"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D,MaxPool2D, Dense, Flatten, BatchNormalization, Activation\n","from tensorflow.keras.optimizers import Adam, RMSprop\n","from tensorflow.keras.applications.efficientnet import EfficientNetB4\n","from tensorflow.nn import silu\n","#EfficientNetB4불러오기\n","Eff = EfficientNetB4(weights = 'imagenet', input_shape = (224,224,3), include_top = False, pooling = 'avg')"],"id":"91d5d927"},{"cell_type":"code","execution_count":null,"metadata":{"id":"JXeZI_9uOVx1"},"outputs":[],"source":["rmsprop = RMSprop(\n","    learning_rate=0.0001,\n",")"],"id":"JXeZI_9uOVx1"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":618,"status":"ok","timestamp":1674043986334,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"dkMHCPj2y8oC","outputId":"9faf962b-3550-490f-8372-74658f830a35"},"outputs":[{"name":"stdout","output_type":"stream","text":["Wed Jan 18 12:13:05 2023       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   50C    P0    27W /  70W |      0MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi"],"id":"dkMHCPj2y8oC"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":50326555,"status":"ok","timestamp":1673799205065,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"6c075ea3","outputId":"136beea5-23a2-47ce-daa8-c28f4f85f0fd"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/100\n","688/688 [==============================] - 530s 734ms/step - loss: 0.6000 - accuracy: 0.7421 - val_loss: 0.3907 - val_accuracy: 0.8399\n","Epoch 2/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.3114 - accuracy: 0.8781 - val_loss: 0.3078 - val_accuracy: 0.8819\n","Epoch 3/100\n","688/688 [==============================] - 503s 730ms/step - loss: 0.1513 - accuracy: 0.9452 - val_loss: 0.3112 - val_accuracy: 0.8917\n","Epoch 4/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0950 - accuracy: 0.9663 - val_loss: 0.2934 - val_accuracy: 0.9086\n","Epoch 5/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0653 - accuracy: 0.9771 - val_loss: 0.3047 - val_accuracy: 0.9119\n","Epoch 6/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0569 - accuracy: 0.9803 - val_loss: 0.2943 - val_accuracy: 0.9170\n","Epoch 7/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0461 - accuracy: 0.9848 - val_loss: 0.3546 - val_accuracy: 0.9057\n","Epoch 8/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0417 - accuracy: 0.9859 - val_loss: 0.2956 - val_accuracy: 0.9204\n","Epoch 9/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0404 - accuracy: 0.9861 - val_loss: 0.3257 - val_accuracy: 0.9137\n","Epoch 10/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0370 - accuracy: 0.9879 - val_loss: 0.3346 - val_accuracy: 0.9231\n","Epoch 11/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0279 - accuracy: 0.9900 - val_loss: 0.3556 - val_accuracy: 0.9139\n","Epoch 12/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0304 - accuracy: 0.9896 - val_loss: 0.3379 - val_accuracy: 0.9191\n","Epoch 13/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0270 - accuracy: 0.9908 - val_loss: 0.3137 - val_accuracy: 0.9231\n","Epoch 14/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0220 - accuracy: 0.9922 - val_loss: 0.3957 - val_accuracy: 0.9162\n","Epoch 15/100\n","688/688 [==============================] - 502s 729ms/step - loss: 0.0269 - accuracy: 0.9902 - val_loss: 0.3647 - val_accuracy: 0.9241\n","Epoch 16/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0224 - accuracy: 0.9921 - val_loss: 0.3221 - val_accuracy: 0.9257\n","Epoch 17/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0212 - accuracy: 0.9926 - val_loss: 0.3354 - val_accuracy: 0.9222\n","Epoch 18/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0203 - accuracy: 0.9931 - val_loss: 0.3275 - val_accuracy: 0.9230\n","Epoch 19/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0193 - accuracy: 0.9940 - val_loss: 0.3463 - val_accuracy: 0.9177\n","Epoch 20/100\n","688/688 [==============================] - 503s 730ms/step - loss: 0.0220 - accuracy: 0.9927 - val_loss: 0.3495 - val_accuracy: 0.9210\n","Epoch 21/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0213 - accuracy: 0.9925 - val_loss: 0.3497 - val_accuracy: 0.9226\n","Epoch 22/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0149 - accuracy: 0.9954 - val_loss: 0.3427 - val_accuracy: 0.9290\n","Epoch 23/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0139 - accuracy: 0.9955 - val_loss: 0.3623 - val_accuracy: 0.9202\n","Epoch 24/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0214 - accuracy: 0.9924 - val_loss: 0.3442 - val_accuracy: 0.9202\n","Epoch 25/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0142 - accuracy: 0.9948 - val_loss: 0.3333 - val_accuracy: 0.9277\n","Epoch 26/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0163 - accuracy: 0.9942 - val_loss: 0.3688 - val_accuracy: 0.9197\n","Epoch 27/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0141 - accuracy: 0.9952 - val_loss: 0.3317 - val_accuracy: 0.9262\n","Epoch 28/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0162 - accuracy: 0.9945 - val_loss: 0.3156 - val_accuracy: 0.9273\n","Epoch 29/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0127 - accuracy: 0.9957 - val_loss: 0.4188 - val_accuracy: 0.9144\n","Epoch 30/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0148 - accuracy: 0.9954 - val_loss: 0.3302 - val_accuracy: 0.9271\n","Epoch 31/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0138 - accuracy: 0.9959 - val_loss: 0.3365 - val_accuracy: 0.9259\n","Epoch 32/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0128 - accuracy: 0.9960 - val_loss: 0.3752 - val_accuracy: 0.9153\n","Epoch 33/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0153 - accuracy: 0.9951 - val_loss: 0.3441 - val_accuracy: 0.9279\n","Epoch 34/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0099 - accuracy: 0.9974 - val_loss: 0.3196 - val_accuracy: 0.9326\n","Epoch 35/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0107 - accuracy: 0.9965 - val_loss: 0.3273 - val_accuracy: 0.9297\n","Epoch 36/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0100 - accuracy: 0.9965 - val_loss: 0.3723 - val_accuracy: 0.9268\n","Epoch 37/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0148 - accuracy: 0.9950 - val_loss: 0.3637 - val_accuracy: 0.9191\n","Epoch 38/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0095 - accuracy: 0.9965 - val_loss: 0.3935 - val_accuracy: 0.9215\n","Epoch 39/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0120 - accuracy: 0.9963 - val_loss: 0.2945 - val_accuracy: 0.9371\n","Epoch 40/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0068 - accuracy: 0.9980 - val_loss: 0.4217 - val_accuracy: 0.9199\n","Epoch 41/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0127 - accuracy: 0.9959 - val_loss: 0.3520 - val_accuracy: 0.9304\n","Epoch 42/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0113 - accuracy: 0.9963 - val_loss: 0.3614 - val_accuracy: 0.9317\n","Epoch 43/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0114 - accuracy: 0.9964 - val_loss: 0.3263 - val_accuracy: 0.9281\n","Epoch 44/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0083 - accuracy: 0.9972 - val_loss: 0.3860 - val_accuracy: 0.9299\n","Epoch 45/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0118 - accuracy: 0.9962 - val_loss: 0.3858 - val_accuracy: 0.9275\n","Epoch 46/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0097 - accuracy: 0.9970 - val_loss: 0.3452 - val_accuracy: 0.9317\n","Epoch 47/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0084 - accuracy: 0.9975 - val_loss: 0.3787 - val_accuracy: 0.9284\n","Epoch 48/100\n","688/688 [==============================] - 502s 729ms/step - loss: 0.0121 - accuracy: 0.9961 - val_loss: 0.3989 - val_accuracy: 0.9241\n","Epoch 49/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0078 - accuracy: 0.9979 - val_loss: 0.3266 - val_accuracy: 0.9315\n","Epoch 50/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0080 - accuracy: 0.9974 - val_loss: 0.3259 - val_accuracy: 0.9357\n","Epoch 51/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0089 - accuracy: 0.9972 - val_loss: 0.3819 - val_accuracy: 0.9302\n","Epoch 52/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0109 - accuracy: 0.9962 - val_loss: 0.3632 - val_accuracy: 0.9320\n","Epoch 53/100\n","688/688 [==============================] - 501s 729ms/step - loss: 0.0075 - accuracy: 0.9976 - val_loss: 0.3758 - val_accuracy: 0.9290\n","Epoch 54/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0070 - accuracy: 0.9975 - val_loss: 0.3507 - val_accuracy: 0.9370\n","Epoch 55/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0103 - accuracy: 0.9966 - val_loss: 0.3320 - val_accuracy: 0.9313\n","Epoch 56/100\n","688/688 [==============================] - 502s 729ms/step - loss: 0.0047 - accuracy: 0.9984 - val_loss: 0.3506 - val_accuracy: 0.9353\n","Epoch 57/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0093 - accuracy: 0.9970 - val_loss: 0.4533 - val_accuracy: 0.9168\n","Epoch 58/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0086 - accuracy: 0.9971 - val_loss: 0.3387 - val_accuracy: 0.9328\n","Epoch 59/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0070 - accuracy: 0.9980 - val_loss: 0.3416 - val_accuracy: 0.9284\n","Epoch 60/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0058 - accuracy: 0.9979 - val_loss: 0.3284 - val_accuracy: 0.9328\n","Epoch 61/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0071 - accuracy: 0.9979 - val_loss: 0.3192 - val_accuracy: 0.9380\n","Epoch 62/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0092 - accuracy: 0.9970 - val_loss: 0.3787 - val_accuracy: 0.9286\n","Epoch 63/100\n","688/688 [==============================] - 502s 729ms/step - loss: 0.0077 - accuracy: 0.9976 - val_loss: 0.3565 - val_accuracy: 0.9306\n","Epoch 64/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0064 - accuracy: 0.9979 - val_loss: 0.3409 - val_accuracy: 0.9348\n","Epoch 65/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0081 - accuracy: 0.9978 - val_loss: 0.3299 - val_accuracy: 0.9355\n","Epoch 66/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0065 - accuracy: 0.9979 - val_loss: 0.3670 - val_accuracy: 0.9328\n","Epoch 67/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0103 - accuracy: 0.9971 - val_loss: 0.3714 - val_accuracy: 0.9284\n","Epoch 68/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0071 - accuracy: 0.9977 - val_loss: 0.4176 - val_accuracy: 0.9261\n","Epoch 69/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0067 - accuracy: 0.9980 - val_loss: 0.3406 - val_accuracy: 0.9326\n","Epoch 70/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0071 - accuracy: 0.9977 - val_loss: 0.3324 - val_accuracy: 0.9342\n","Epoch 71/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0082 - accuracy: 0.9974 - val_loss: 0.3996 - val_accuracy: 0.9275\n","Epoch 72/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0067 - accuracy: 0.9976 - val_loss: 0.3240 - val_accuracy: 0.9359\n","Epoch 73/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0057 - accuracy: 0.9982 - val_loss: 0.3804 - val_accuracy: 0.9308\n","Epoch 74/100\n","688/688 [==============================] - 501s 729ms/step - loss: 0.0059 - accuracy: 0.9980 - val_loss: 0.3516 - val_accuracy: 0.9370\n","Epoch 75/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0065 - accuracy: 0.9980 - val_loss: 0.3795 - val_accuracy: 0.9340\n","Epoch 76/100\n","688/688 [==============================] - 502s 729ms/step - loss: 0.0056 - accuracy: 0.9980 - val_loss: 0.3700 - val_accuracy: 0.9339\n","Epoch 77/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0069 - accuracy: 0.9976 - val_loss: 0.3592 - val_accuracy: 0.9335\n","Epoch 78/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0069 - accuracy: 0.9980 - val_loss: 0.3498 - val_accuracy: 0.9359\n","Epoch 79/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0057 - accuracy: 0.9980 - val_loss: 0.3453 - val_accuracy: 0.9351\n","Epoch 80/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0066 - accuracy: 0.9982 - val_loss: 0.3622 - val_accuracy: 0.9339\n","Epoch 81/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0061 - accuracy: 0.9978 - val_loss: 0.3534 - val_accuracy: 0.9315\n","Epoch 82/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0059 - accuracy: 0.9981 - val_loss: 0.3671 - val_accuracy: 0.9368\n","Epoch 83/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0048 - accuracy: 0.9982 - val_loss: 0.3756 - val_accuracy: 0.9359\n","Epoch 84/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0068 - accuracy: 0.9983 - val_loss: 0.3941 - val_accuracy: 0.9251\n","Epoch 85/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0065 - accuracy: 0.9979 - val_loss: 0.3651 - val_accuracy: 0.9293\n","Epoch 86/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0066 - accuracy: 0.9981 - val_loss: 0.3833 - val_accuracy: 0.9297\n","Epoch 87/100\n","688/688 [==============================] - 503s 732ms/step - loss: 0.0050 - accuracy: 0.9985 - val_loss: 0.3402 - val_accuracy: 0.9346\n","Epoch 88/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0048 - accuracy: 0.9985 - val_loss: 0.3447 - val_accuracy: 0.9362\n","Epoch 89/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0058 - accuracy: 0.9980 - val_loss: 0.4076 - val_accuracy: 0.9266\n","Epoch 90/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0065 - accuracy: 0.9982 - val_loss: 0.4084 - val_accuracy: 0.9275\n","Epoch 91/100\n","688/688 [==============================] - 502s 730ms/step - loss: 0.0039 - accuracy: 0.9985 - val_loss: 0.3451 - val_accuracy: 0.9379\n","Epoch 92/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0046 - accuracy: 0.9986 - val_loss: 0.3602 - val_accuracy: 0.9348\n","Epoch 93/100\n","688/688 [==============================] - 504s 732ms/step - loss: 0.0036 - accuracy: 0.9989 - val_loss: 0.3747 - val_accuracy: 0.9360\n","Epoch 94/100\n","688/688 [==============================] - 505s 734ms/step - loss: 0.0058 - accuracy: 0.9979 - val_loss: 0.3707 - val_accuracy: 0.9371\n","Epoch 95/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0069 - accuracy: 0.9981 - val_loss: 0.4366 - val_accuracy: 0.9286\n","Epoch 96/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0069 - accuracy: 0.9982 - val_loss: 0.3630 - val_accuracy: 0.9315\n","Epoch 97/100\n","688/688 [==============================] - 504s 733ms/step - loss: 0.0065 - accuracy: 0.9982 - val_loss: 0.3359 - val_accuracy: 0.9344\n","Epoch 98/100\n","688/688 [==============================] - 506s 736ms/step - loss: 0.0050 - accuracy: 0.9985 - val_loss: 0.3659 - val_accuracy: 0.9353\n","Epoch 99/100\n","688/688 [==============================] - 501s 728ms/step - loss: 0.0033 - accuracy: 0.9988 - val_loss: 0.3930 - val_accuracy: 0.9350\n","Epoch 100/100\n","688/688 [==============================] - 503s 731ms/step - loss: 0.0076 - accuracy: 0.9975 - val_loss: 0.4193 - val_accuracy: 0.9291\n"]}],"source":["model = Sequential()\n","#분류기 직접 정리\n","model.add(Eff)\n","model.add(Dense(512))\n","model.add(BatchNormalization())\n","model.add(Activation('silu'))\n","model.add(Dense(4,activation = 'softmax'))\n","model.compile(optimizer=Adam(1e-4), # 옵티마이저 : rmsprop\n","              loss = 'categorical_crossentropy', # 손실 함수 : sparse_categorical_crossentropy\n","              metrics = ['accuracy']) # 모니터링 할 평가지표 : \n","history = model.fit(x_train, y_train, \n","                      epochs = 100, \n","                      batch_size = 32, \n","                      validation_data = (x_val, y_val))"],"id":"6c075ea3"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1673799205066,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"ab4c319c","outputId":"707cc98b-53cf-4186-937c-d35f40b109db"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," efficientnetb4 (Functional)  (None, 1792)             17673823  \n","                                                                 \n"," dense (Dense)               (None, 512)               918016    \n","                                                                 \n"," batch_normalization (BatchN  (None, 512)              2048      \n"," ormalization)                                                   \n","                                                                 \n"," activation (Activation)     (None, 512)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 4)                 2052      \n","                                                                 \n","=================================================================\n","Total params: 18,595,939\n","Trainable params: 18,469,708\n","Non-trainable params: 126,231\n","_________________________________________________________________\n"]}],"source":["model.summary()"],"id":"ab4c319c"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1673799205067,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"ace5a8ef","outputId":"0cd7e674-9a79-4093-8892-6f6bb1a8f3a1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# 정확도와 로스 그래프\n","his_dict = history.history\n","loss = his_dict['loss']\n","val_loss = his_dict['val_loss'] \n","\n","epochs = range(1, len(loss) + 1)\n","fig = plt.figure(figsize = (10, 5))\n","\n","# 훈련 및 검증 손실 그리기\n","ax1 = fig.add_subplot(1, 2, 1)\n","ax1.plot(epochs, loss, color = 'blue', label = 'train_loss')\n","ax1.plot(epochs, val_loss, color = 'orange', label = 'val_loss')\n","ax1.set_title('train and val loss')\n","ax1.set_xlabel('epochs')\n","ax1.set_ylabel('loss')\n","ax1.legend()\n","\n","acc = his_dict['accuracy']\n","val_acc = his_dict['val_accuracy']\n","\n","# 훈련 및 검증 정확도 그리기\n","ax2 = fig.add_subplot(1, 2, 2)\n","ax2.plot(epochs, acc, color = 'blue', label = 'train_acc')\n","ax2.plot(epochs, val_acc, color = 'orange', label = 'val_acc')\n","ax2.set_title('train and val acc')\n","ax2.set_xlabel('epochs')\n","ax2.set_ylabel('acc')\n","ax2.legend()\n","\n","plt.show()"],"id":"ace5a8ef"},{"cell_type":"code","execution_count":null,"metadata":{"id":"faa8d401"},"outputs":[],"source":["# 6. 모델 저장하기\n","from tensorflow.keras.models import load_model\n","model.save('/content/drive/MyDrive/EfficientNetB4_6000_tuning11.h5')"],"id":"faa8d401"},{"cell_type":"code","execution_count":12,"metadata":{"id":"GCgrinsJTahp","executionInfo":{"status":"ok","timestamp":1674473192188,"user_tz":-540,"elapsed":271,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#정확도 f1\n","from sklearn.metrics import *\n","def get_clf_eval(y_test,pred): \n","  f1 = f1_score(y_test,pred,average=\"macro\") \n","  acc = accuracy_score(y_val,predict)   \n","  loss = model.evaluate(x_val, y_val, batch_size=64)\n","  print('정확도 :',acc)\n","  print('f1 score:',f1)\n","  print('loss :',loss )"],"id":"GCgrinsJTahp"},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35601,"status":"ok","timestamp":1674473235712,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"Y_qj9JZ_Ti91","outputId":"4239fef1-38d4-4431-a822-ae5849497f6c"},"outputs":[{"output_type":"stream","name":"stdout","text":["172/172 [==============================] - 35s 140ms/step\n"]}],"source":["predcit = model.predict(x_val)\n","predict = []\n","for i in np.arange(len(predcit)):\n","  labels = np.argmax(predcit[i])\n","  predict.append(labels)\n","predict = np.array(predict)\n","predict = np_utils.to_categorical(predict)"],"id":"Y_qj9JZ_Ti91"},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28605,"status":"ok","timestamp":1674473264312,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"bYwzwM5yTmIp","outputId":"21e36ee0-57e0-41cf-8e3e-9c2dfb7e5406"},"outputs":[{"output_type":"stream","name":"stdout","text":["86/86 [==============================] - 28s 276ms/step - loss: 0.3573 - accuracy: 0.9380\n","정확도 : 0.9380450581395349\n","f1 score: 0.9375526641640672\n","loss : [0.3572806119918823, 0.938045084476471]\n"]}],"source":["#EfficientNetB4\n","get_clf_eval(y_val,predict)"],"id":"bYwzwM5yTmIp"},{"cell_type":"code","execution_count":11,"metadata":{"id":"GP35puZ1t2tk","executionInfo":{"status":"ok","timestamp":1674473135831,"user_tz":-540,"elapsed":10538,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[],"source":["#모델불러오기\n","from tensorflow.keras.models import load_model\n","model = tf.keras.models.load_model('/content/drive/MyDrive/EfficientNetB4_6000_tuning11.h5')"],"id":"GP35puZ1t2tk"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1673914853143,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"fOiwuFQJFz3g","outputId":"44860e24-59ae-4703-c8fa-cdebd78f94aa"},"outputs":[{"name":"stdout","output_type":"stream","text":["[<keras.engine.functional.Functional object at 0x7f95a67ee2b0>, <keras.layers.core.dense.Dense object at 0x7f95a487daf0>, <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f95402d9d60>, <keras.layers.core.activation.Activation object at 0x7f95285ed310>, <keras.layers.core.dense.Dense object at 0x7f95285ed280>]\n"]}],"source":["print(model.layers)"],"id":"fOiwuFQJFz3g"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","output_embedded_package_id":"18BCiitTblC8Y9LU1WCgpVnSMFyt9aPrc"},"executionInfo":{"elapsed":2890,"status":"ok","timestamp":1673914908878,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"zC8M_ZTRGk8f","outputId":"1d43133b-2554-40d0-fb71-6a658dfac11c"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["model.get_weights()"],"id":"zC8M_ZTRGk8f"},{"cell_type":"code","execution_count":null,"metadata":{"id":"xJalpRqIuG5x"},"outputs":[],"source":["local_zip = '/content/drive/MyDrive/eyes_validation.zip'\n","zip_ref = zipfile.ZipFile(local_zip, 'r')\n","zip_ref.extractall('/content')\n","zip_ref.close()"],"id":"xJalpRqIuG5x"},{"cell_type":"code","execution_count":null,"metadata":{"id":"1xOsxX7Jub54"},"outputs":[],"source":["def pred_label(pred):\n","  img = cv2.imread(pred, cv2.IMREAD_COLOR)\n","  im = cv2.resize(img,(224,224))\n","  pred_image = np.expand_dims(im, axis=0)\n","  predict = model.predict(pred_image)\n","  predict_image = np.argmax(predict)\n","  if predict_image == 0:\n","      print('백내장이 아닙니다.')\n","  elif predict_image == 1:\n","      print('백내장 초기단계입니다.')\n","  elif predict_image == 2:\n","      print('백내장 중간 단계입니다.')\n","  else:\n","      print('백내장 심해요')"],"id":"1xOsxX7Jub54"},{"cell_type":"code","execution_count":null,"metadata":{"id":"IklsAbXKulEQ","executionInfo":{"status":"ok","timestamp":1674472668029,"user_tz":-540,"elapsed":4322,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7b286861-c502-4cbc-9f3d-6ab583dacf10"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["861"]},"metadata":{},"execution_count":17}],"source":["#백내장 무 폴더 정리\n","img_dir0 = '/content/eyes_validation/eye_validation/0'\n","img0 = os.listdir(img_dir0)\n","image0 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img0))\n","label0 = list(filter(lambda x : x.find('.json')!=-1,img0))\n","image_0 = []\n","image_label0 = []\n","for i in image0:\n","    img = np.array(Image.open('/content/eyes_validation/eye_validation/0/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im0 = cv2.resize(im,(224,224))\n","    image_0.append(im0)\n","    image_label0.append(0)\n","len(image_0)"],"id":"IklsAbXKulEQ"},{"cell_type":"code","execution_count":null,"metadata":{"id":"ex40Svk1u5Bc","executionInfo":{"status":"ok","timestamp":1674472670436,"user_tz":-540,"elapsed":2411,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3eac534e-cabb-428c-e060-1a51b4fd0c3a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1722"]},"metadata":{},"execution_count":18}],"source":["#백내장 초기 폴더 정리\n","img_dir1 = '/content/eyes_validation/eye_validation/1'\n","img1 = os.listdir(img_dir1)\n","image1 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img1))\n","label1 = list(filter(lambda x : x.find('.json')!=-1,img1))\n","for i in image1:\n","    img = np.array(Image.open('/content/eyes_validation/eye_validation/1/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im1 = cv2.resize(im,(224,224))\n","    image_0.append(im1)\n","    image_label0.append(1)\n","len(image_0)    "],"id":"ex40Svk1u5Bc"},{"cell_type":"code","execution_count":null,"metadata":{"id":"9aKYI2wiu5EO","executionInfo":{"status":"ok","timestamp":1674472672735,"user_tz":-540,"elapsed":2303,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0e731ce6-7680-49e7-cb48-76868df2d349"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["2594"]},"metadata":{},"execution_count":19}],"source":["#백내장 비성숙 폴더 정리\n","img_dir2 = '/content/eyes_validation/eye_validation/2'\n","img2 = os.listdir(img_dir2)\n","image2 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img2))\n","label2 = list(filter(lambda x : x.find('.json')!=-1,img2))\n","for i in image2:\n","    img = np.array(Image.open('/content/eyes_validation/eye_validation/2/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im2 = cv2.resize(im,(224,224))\n","    image_0.append(im2)\n","    image_label0.append(2)\n","len(image_0)    "],"id":"9aKYI2wiu5EO"},{"cell_type":"code","execution_count":null,"metadata":{"id":"0FRxRtFsu5Gq","executionInfo":{"status":"ok","timestamp":1674472675162,"user_tz":-540,"elapsed":2439,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fbc059fe-a173-4f93-ca5c-1e4244884648"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3436"]},"metadata":{},"execution_count":20}],"source":["#백내장 성숙 폴더 정리\n","img_dir3 = '/content/eyes_validation/eye_validation/3'\n","img3 = os.listdir(img_dir3)\n","image3 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img3))\n","label3 = list(filter(lambda x : x.find('.json')!=-1,img3))\n","for i in image3:\n","    img = np.array(Image.open('/content/eyes_validation/eye_validation/3/{}'.format(i)))\n","    im = img[50:350,50:350]\n","    im3 = cv2.resize(im,(224,224))\n","    image_0.append(im3)\n","    image_label0.append(3)\n","len(image_0)    "],"id":"0FRxRtFsu5Gq"},{"cell_type":"code","source":[],"metadata":{"id":"BpXLxZYfWfA4"},"id":"BpXLxZYfWfA4","execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(image_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gob4UidFfodl","executionInfo":{"status":"ok","timestamp":1674472685662,"user_tz":-540,"elapsed":271,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"outputId":"5e475803-e333-4be5-bd65-6046d7966be2"},"id":"Gob4UidFfodl","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3436"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4115,"status":"ok","timestamp":1674472692557,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"ZXlqn4-g1Sar","outputId":"1ec83e0d-557b-4811-b3d4-72b0cc31b690"},"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 4s 4s/step\n","백내장 초기단계입니다.\n"]}],"source":["pred_label('/content/eyes_validation/eye_validation/0/{}'.format(image0[40]))"],"id":"ZXlqn4-g1Sar"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":841},"executionInfo":{"elapsed":15195,"status":"error","timestamp":1674472713359,"user":{"displayName":"박준원","userId":"13178446148627772304"},"user_tz":-540},"id":"Rpy0DsfGG6-4","outputId":"8c73ac18-6226-414a-e163-556dd037115e"},"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-9a1fce5fb10f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredcit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpredict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredcit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredcit\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mpredict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mtf__predict_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\", line 1845, in predict_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\", line 1834, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\", line 1823, in run_step  **\n        outputs = model.predict_step(data)\n    File \"/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\", line 1791, in predict_step\n        return self(x, training=False)\n    File \"/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.8/dist-packages/keras/engine/input_spec.py\", line 200, in assert_input_compatibility\n        raise ValueError(f'Layer \"{layer_name}\" expects {len(input_spec)} input(s),'\n\n    ValueError: Layer \"sequential_1\" expects 1 input(s), but it received 3436 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:1' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:2' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:3' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:4' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:5' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:6' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:7' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:8' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:9' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:10' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:11' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:12' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:13' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:14' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:15' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:16' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:17' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:18' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:19' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:20' shape=(32, 224, 3) dtype=uint8>, <tf.Tensor 'IteratorGetNext:21'...\n"]}],"source":["predcit = model.predict(image_0)\n","predict = []\n","for i in np.arange(len(predcit)):\n","  labels = np.argmax(predcit[i])\n","  predict.append(labels)\n","predict = np.array(predict)\n","predict = np_utils.to_categorical(predict)"],"id":"Rpy0DsfGG6-4"},{"cell_type":"code","source":["#EfficientNetB4\n","get_clf_eval(y_val,predict)"],"metadata":{"id":"R7I_f8UGWffo"},"id":"R7I_f8UGWffo","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uREkW7JHHFqu"},"outputs":[],"source":[],"id":"uREkW7JHHFqu"}],"metadata":{"colab":{"machine_shape":"hm","provenance":[{"file_id":"1yLCfzMEA-lq8rvi3CO6uBorUflR5z_nX","timestamp":1673500019406},{"file_id":"1qjO6e-aiGAKah9apVkOEf0ppjTDBKsdH","timestamp":1673394405663},{"file_id":"1FUiqi91sy2zbvqi4isS75vy-OVn8L1-F","timestamp":1673339006687},{"file_id":"1TcmlFConIROmC5HX9CCLpC10MREBR41T","timestamp":1673314675033},{"file_id":"1DQIi6kJEUE77Z0vTw6pS7k9cBoFuby3_","timestamp":1672917123935},{"file_id":"1HiOPnSrKz18GxzzSRsJkxyZjDCZxzNTw","timestamp":1672909382021},{"file_id":"1Syf7lFpwp2OZRMexYV0SELXNwMyBQ9ur","timestamp":1672732366219},{"file_id":"1tdGegwZ7kMdQ8a5oRZF0bVZ_FSZ_XmMX","timestamp":1672729920760},{"file_id":"12dyzlz-sWPzN_baEMBUcCwsI8Z30vmjr","timestamp":1672726913788},{"file_id":"1xvk-Qtl6KiSozNeUi8TqqtKkwDNNMNTD","timestamp":1672705534688}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":5}