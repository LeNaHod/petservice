{"cells":[{"cell_type":"code","execution_count":null,"id":"0403377f","metadata":{"id":"0403377f"},"outputs":[],"source":["import os\n","import io\n","from zipfile import ZipFile\n","import pandas as pd\n","import tensorflow as tf\n","from PIL import Image\n","import numpy as np\n","import random\n","import matplotlib.image as mpimg\n","import matplotlib.pyplot as plt\n","import cv2\n","from sklearn.metrics import *\n","import os\n","import zipfile\n","from google.colab import drive\n","from keras.utils import np_utils\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator"]},{"cell_type":"code","source":["drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MKd4bLhMY9Kb","executionInfo":{"status":"ok","timestamp":1673419139914,"user_tz":-540,"elapsed":3546,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"outputId":"8263c38c-5aa8-4808-97bf-1289fe5f4883"},"id":"MKd4bLhMY9Kb","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["local_zip = '/content/drive/MyDrive/eyes_train.zip'\n","zip_ref = zipfile.ZipFile(local_zip, 'r')\n","zip_ref.extractall('/content')\n","zip_ref.close()"],"metadata":{"id":"Vr5XgKxgZUJF"},"id":"Vr5XgKxgZUJF","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#백내장 무 폴더 정리\n","img_dir0 = '/content/eyes_train/eye_train/0'\n","img0 = os.listdir(img_dir0)\n","image0 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img0))\n","label0 = list(filter(lambda x : x.find('.json')!=-1,img0))\n","image_0 = []\n","image_label0 = []\n","for i in image0:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/0/{}'.format(i)))\n","    im0 = cv2.resize(img,(224,224))\n","    image_0.append(im0)\n","    image_label0.append(0)"],"metadata":{"id":"D_pWqLysByXk"},"id":"D_pWqLysByXk","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#백내장 초기 폴더 정리\n","img_dir1 = '/content/eyes_train/eye_train/1'\n","img1 = os.listdir(img_dir1)\n","image1 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img1))\n","label1 = list(filter(lambda x : x.find('.json')!=-1,img1))\n","for i in image1:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/1/{}'.format(i)))\n","    im1 = cv2.resize(img,(224,224))\n","    image_0.append(im1)\n","    image_label0.append(1)"],"metadata":{"id":"kJ5HCPjhGPVH"},"id":"kJ5HCPjhGPVH","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#백내장 비성숙 폴더 정리\n","img_dir2 = '/content/eyes_train/eye_train/2'\n","img2 = os.listdir(img_dir2)\n","image2 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img2))\n","label2 = list(filter(lambda x : x.find('.json')!=-1,img2))\n","for i in image2:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/2/{}'.format(i)))\n","    im2 = cv2.resize(img,(224,224))\n","    image_0.append(im2)\n","    image_label0.append(2)"],"metadata":{"id":"iNrcYry6GuX0"},"id":"iNrcYry6GuX0","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#백내장 성숙 폴더 정리\n","img_dir3 = '/content/eyes_train/eye_train/3'\n","img3 = os.listdir(img_dir3)\n","image3 = list(filter(lambda x: x.find('.jpg') != -1 or x.find('.png') != -1, img3))\n","label3 = list(filter(lambda x : x.find('.json')!=-1,img3))\n","for i in image3:\n","    img = np.array(Image.open('/content/eyes_train/eye_train/3/{}'.format(i)))\n","    im3 = cv2.resize(img,(224,224))\n","    image_0.append(im3)\n","    image_label0.append(3)"],"metadata":{"id":"h76Hzvl8HRqK"},"id":"h76Hzvl8HRqK","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"9ff23a93","metadata":{"id":"9ff23a93"},"outputs":[],"source":["x = np.array(image_0)\n","y = np.array(image_label0)"]},{"cell_type":"code","source":["#원핫 인코딩\n","y = np_utils.to_categorical(y)"],"metadata":{"id":"ULV80pESE8iq"},"id":"ULV80pESE8iq","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"d7912f59","metadata":{"id":"d7912f59"},"outputs":[],"source":["#데이터 분할\n","x_train, x_val, y_train, y_val = train_test_split(x, y, shuffle =True, test_size = 0.2, random_state = 123)"]},{"cell_type":"code","execution_count":null,"id":"91d5d927","metadata":{"id":"91d5d927"},"outputs":[],"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D,MaxPool2D, Dense, Flatten, BatchNormalization, Activation\n","from tensorflow.keras.optimizers import Adam, RMSprop\n","from tensorflow.keras.applications.efficientnet import EfficientNetB4\n","from tensorflow.nn import silu\n","#EfficientNetB4불러오기\n","Eff = EfficientNetB4(weights = 'imagenet', input_shape = (224,224,3), include_top = False, pooling = 'avg')"]},{"cell_type":"code","source":["rmsprop = RMSprop(\n","    learning_rate=0.0001,\n",")"],"metadata":{"id":"JXeZI_9uOVx1"},"id":"JXeZI_9uOVx1","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"6c075ea3","metadata":{"id":"6c075ea3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f5d59635-ff8f-4438-90c8-da02b28f6b68","executionInfo":{"status":"ok","timestamp":1673424509346,"user_tz":-540,"elapsed":948943,"user":{"displayName":"박준원","userId":"13178446148627772304"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","688/688 [==============================] - 542s 757ms/step - loss: 0.6520 - accuracy: 0.7163 - val_loss: 0.5369 - val_accuracy: 0.7731\n","Epoch 2/10\n","688/688 [==============================] - 519s 755ms/step - loss: 0.5094 - accuracy: 0.7875 - val_loss: 0.5195 - val_accuracy: 0.7838\n","Epoch 3/10\n","688/688 [==============================] - 519s 755ms/step - loss: 0.4761 - accuracy: 0.8054 - val_loss: 0.4340 - val_accuracy: 0.8283\n","Epoch 4/10\n","688/688 [==============================] - 519s 755ms/step - loss: 0.4681 - accuracy: 0.8125 - val_loss: 11.5998 - val_accuracy: 0.5454\n","Epoch 5/10\n","688/688 [==============================] - 519s 754ms/step - loss: 0.5544 - accuracy: 0.7834 - val_loss: 0.5222 - val_accuracy: 0.7785\n","Epoch 6/10\n","688/688 [==============================] - 520s 756ms/step - loss: 0.4776 - accuracy: 0.8115 - val_loss: 0.8311 - val_accuracy: 0.7832\n","Epoch 7/10\n","688/688 [==============================] - 514s 747ms/step - loss: 0.4291 - accuracy: 0.8323 - val_loss: 0.4070 - val_accuracy: 0.8361\n","Epoch 8/10\n","688/688 [==============================] - 519s 755ms/step - loss: 0.3252 - accuracy: 0.8746 - val_loss: 0.5159 - val_accuracy: 0.8194\n","Epoch 9/10\n","688/688 [==============================] - 519s 754ms/step - loss: 0.2573 - accuracy: 0.9032 - val_loss: 0.4305 - val_accuracy: 0.8310\n","Epoch 10/10\n","688/688 [==============================] - 519s 754ms/step - loss: 0.4510 - accuracy: 0.8247 - val_loss: 0.5509 - val_accuracy: 0.7932\n"]}],"source":["model = Sequential()\n","#분류기 직접 정리\n","model.add(Eff)\n","model.add(Dense(1024))\n","model.add(BatchNormalization())\n","model.add(Activation('silu'))\n","model.add(Dense(4,activation = 'softmax'))\n","model.compile(optimizer=Adam(1e-3), # 옵티마이저 : rmsprop\n","              loss = 'categorical_crossentropy', # 손실 함수 : sparse_categorical_crossentropy\n","              metrics = ['accuracy']) # 모니터링 할 평가지표 : \n","history = model.fit(x_train, y_train, \n","                      epochs = 10, \n","                      batch_size = 32, \n","                      validation_data = (x_val, y_val))"]},{"cell_type":"code","execution_count":null,"id":"ab4c319c","metadata":{"id":"ab4c319c","executionInfo":{"status":"ok","timestamp":1673424509360,"user_tz":-540,"elapsed":5,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2d06c849-24fb-46bc-b380-dc0b1a507bb5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," efficientnetb4 (Functional)  (None, 1792)             17673823  \n","                                                                 \n"," dense (Dense)               (None, 1024)              1836032   \n","                                                                 \n"," batch_normalization (BatchN  (None, 1024)             4096      \n"," ormalization)                                                   \n","                                                                 \n"," activation (Activation)     (None, 1024)              0         \n","                                                                 \n"," dense_1 (Dense)             (None, 4)                 4100      \n","                                                                 \n","=================================================================\n","Total params: 19,518,051\n","Trainable params: 19,390,796\n","Non-trainable params: 127,255\n","_________________________________________________________________\n"]}],"source":["model.summary()"]},{"cell_type":"code","execution_count":null,"id":"ace5a8ef","metadata":{"id":"ace5a8ef","executionInfo":{"status":"ok","timestamp":1673424509349,"user_tz":-540,"elapsed":3,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/","height":350},"outputId":"e14781c6-f5e5-4aa6-90cb-bdf0a7c7c0e1"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# 정확도와 로스 그래프\n","his_dict = history.history\n","loss = his_dict['loss']\n","val_loss = his_dict['val_loss'] \n","\n","epochs = range(1, len(loss) + 1)\n","fig = plt.figure(figsize = (10, 5))\n","\n","# 훈련 및 검증 손실 그리기\n","ax1 = fig.add_subplot(1, 2, 1)\n","ax1.plot(epochs, loss, color = 'blue', label = 'train_loss')\n","ax1.plot(epochs, val_loss, color = 'orange', label = 'val_loss')\n","ax1.set_title('train and val loss')\n","ax1.set_xlabel('epochs')\n","ax1.set_ylabel('loss')\n","ax1.legend()\n","\n","acc = his_dict['accuracy']\n","val_acc = his_dict['val_accuracy']\n","\n","# 훈련 및 검증 정확도 그리기\n","ax2 = fig.add_subplot(1, 2, 2)\n","ax2.plot(epochs, acc, color = 'blue', label = 'train_acc')\n","ax2.plot(epochs, val_acc, color = 'orange', label = 'val_acc')\n","ax2.set_title('train and val acc')\n","ax2.set_xlabel('epochs')\n","ax2.set_ylabel('acc')\n","ax2.legend()\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"faa8d401","metadata":{"id":"faa8d401"},"outputs":[],"source":["# 6. 모델 저장하기\n","from tensorflow.keras.models import load_model\n","model.save('/content/drive/MyDrive/EfficientNetB4_6000_tuning06.h5')"]},{"cell_type":"code","source":["#정확도 f1\n","from sklearn.metrics import *\n","def get_clf_eval(y_test,pred): \n","  f1 = f1_score(y_test,pred,average=\"macro\") \n","  acc = accuracy_score(y_val,predict)   \n","  loss = model.evaluate(x_val, y_val, batch_size=32)\n","  print('정확도 :',acc)\n","  print('f1 score:',f1)\n","  print('loss :',loss )"],"metadata":{"id":"GCgrinsJTahp"},"id":"GCgrinsJTahp","execution_count":null,"outputs":[]},{"cell_type":"code","source":["predcit = model.predict(x_val)\n","predict = []\n","for i in np.arange(len(predcit)):\n","  labels = np.argmax(predcit[i])\n","  predict.append(labels)\n","predict = np.array(predict)\n","predict = np_utils.to_categorical(predict)"],"metadata":{"id":"Y_qj9JZ_Ti91","executionInfo":{"status":"ok","timestamp":1673424542485,"user_tz":-540,"elapsed":28713,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ca7d3646-9156-4348-91e2-788fc322fde4"},"id":"Y_qj9JZ_Ti91","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["172/172 [==============================] - 27s 143ms/step\n"]}]},{"cell_type":"code","source":["#EfficientNetB4\n","get_clf_eval(y_val,predict)"],"metadata":{"id":"bYwzwM5yTmIp","executionInfo":{"status":"ok","timestamp":1673424583988,"user_tz":-540,"elapsed":41505,"user":{"displayName":"박준원","userId":"13178446148627772304"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"51e2eb4a-312a-4685-a3f9-e61042308a08"},"id":"bYwzwM5yTmIp","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["172/172 [==============================] - 25s 148ms/step - loss: 0.5509 - accuracy: 0.7932\n","정확도 : 0.7932412790697675\n","f1 score: 0.792903701755993\n","loss : [0.5508954524993896, 0.7932412624359131]\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"},"colab":{"provenance":[{"file_id":"1vEaiCpAKb-Z6nH83_RfsSY-LmBq4z_k3","timestamp":1673409790959},{"file_id":"1yLCfzMEA-lq8rvi3CO6uBorUflR5z_nX","timestamp":1673400321741},{"file_id":"1qjO6e-aiGAKah9apVkOEf0ppjTDBKsdH","timestamp":1673394405663},{"file_id":"1FUiqi91sy2zbvqi4isS75vy-OVn8L1-F","timestamp":1673339006687},{"file_id":"1TcmlFConIROmC5HX9CCLpC10MREBR41T","timestamp":1673314675033},{"file_id":"1DQIi6kJEUE77Z0vTw6pS7k9cBoFuby3_","timestamp":1672917123935},{"file_id":"1HiOPnSrKz18GxzzSRsJkxyZjDCZxzNTw","timestamp":1672909382021},{"file_id":"1Syf7lFpwp2OZRMexYV0SELXNwMyBQ9ur","timestamp":1672732366219},{"file_id":"1tdGegwZ7kMdQ8a5oRZF0bVZ_FSZ_XmMX","timestamp":1672729920760},{"file_id":"12dyzlz-sWPzN_baEMBUcCwsI8Z30vmjr","timestamp":1672726913788},{"file_id":"1xvk-Qtl6KiSozNeUi8TqqtKkwDNNMNTD","timestamp":1672705534688}],"machine_shape":"hm"},"gpuClass":"standard","accelerator":"GPU"},"nbformat":4,"nbformat_minor":5}